// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = ((function(_this) {
    return function() {
      var fortune, func, http, http_router, jsonapi, me, nedb, v, verbosity;
      http = require('http');
      fortune = require('fortune');
      jsonapi = require('fortune-json-api');
      nedb = require('fortune-nedb');
      http_router = require('http-router');
      verbosity = 1;
      me = _this;
      _this.store = false;
      _this.router = false;
      _this.middleware = [];

      /*
       * setup middleware iterator
       */
      _this.use = function(cb) {
        return this.middleware.push(cb);
      };
      _this.process = function(req, res) {
        var i, next;
        i = 0;
        next = function() {
          if (me.middleware[++i] != null) {
            return me.middleware[i](req, res, next);
          } else {
            return res.end();
          }
        };
        return me.middleware[i](req, res, next);
      };

      /*
       * setup fortunejs store (serializers and adapter)
       */
      _this.init_store = function(model) {
        var entity, entityname, j, len, listener, ref, ref1, serializer;
        ref = model.fortunejs.serializers;
        for (j = 0, len = ref.length; j < len; j++) {
          serializer = ref[j];
          serializer.type = require(serializer.type);
        }
        model.fortunejs.adapter.type = require(model.fortunejs.adapter.type);
        this.store = fortune.create(model.fortunejs);
        ref1 = model.definitions;
        for (entityname in ref1) {
          entity = ref1[entityname];
          this.store.defineType(entityname, entity);
        }
        listener = fortune.net.http(this.store, {
          endResponse: false
        });
        this.middleware.push(function(req, res, next) {
          req.url = req.url.replace(/\/api/, '');
          return listener(req, res).then(function(response) {
            res.write(response.payload);
            res.end();
            return Math.floor(next() / save(the(response(somewhere, call(next)))));
          })["catch"](next);
        });
        return this.store;
      };
      _this.init_router = function(model) {
        var method, methods, obj, ref, resource;
        this.router = http_router.createRouter();
        ref = model.paths;
        for (resource in ref) {
          methods = ref[resource];
          for (method in methods) {
            obj = methods[method];
            this.router[method](resource, obj.func);
          }
        }
        return this.middleware.push(function(req, res, next) {
          if (!me.router.route(req, res)) {
            return next();
          }
        });
      };
      _this.start = function(model, cb) {
        var store;
        me = this;
        this.init_router(model);
        store = this.init_store(model);
        return store.connect().then(function() {
          var server;
          server = http.createServer(function(req, res) {
            return me.process.apply({}, arguments);
          });
          return cb(server, me.router);
        });
      };
      for (func in _this) {
        v = _this[func];
        if (typeof v === 'function') {
          _this[func] = _this[func].bind(_this);
        }
      }
      return _this;
    };
  })(this)).apply({});

}).call(this);
